Date: Mon, 11 Oct 2021 16:26:26 -0500 (CDT)
Message-ID: <1094332006.2748.1633987586091@EASMN203V.uncle_bob.com>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_2747_831873689.1633987586091"

------=_Part_2747_831873689.1633987586091
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>How to write good Test Cases</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>How to write good Test Cases</h1>
    <div class=3D"Section1">
        <div style=3D"display: none;">
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases *** Empty Password Empty Username Empty Username And Password Inval=
id Username Invalid Password Invalid Username And Password</pre>=20
</div>
</div>
<p><br></p>
</div>
<h1 id=3D"HowtowritegoodTestCases-MyapologiestotheauthorPekkaKl=C3=A4rck(Le=
addeveloperandoriginalauthorofRobotFramework)forwholesalepiracyofyourguidan=
ce."><span style=3D"color: rgb(0,0,0);">My apologies to the author&nbsp;Pek=
ka Kl=C3=A4rck (<span style=3D"color: rgb(36,41,46);">Lead developer and or=
iginal author of Robot Framework</span>) for wholesale piracy of your guida=
nce.</span></h1>
<p><br></p>
<p><span style=3D"color: rgb(0,0,0);">Link:&nbsp;<a href=3D"https://github.=
com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCa=
ses.rst" class=3D"external-link" rel=3D"nofollow">How to write good Test Ca=
ses</a></span></p>
<p><br></p>
<div class=3D"confluence-information-macro confluence-information-macro-inf=
ormation">
<span class=3D"aui-icon aui-icon-small aui-iconfont-info confluence-informa=
tion-macro-icon"></span>
<div class=3D"confluence-information-macro-body">
These are general all around good practices for test writing, they are not =
specific to any company. The article has been updated to reflect current Robot Fram=
ework syntax.&nbsp;
</div>
</div>
<p><br></p>
<h1 style=3D"margin-left: 0.0px;" id=3D"HowtowritegoodTestCases-Howtowriteg=
oodtestcasesusingRobotFramework">How to write good test cases using Robot F=
ramework</h1>
<p>Table of contents:</p>
<ul>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#introduction" style=3D"text-decoratio=
n: none;" class=3D"external-link" rel=3D"nofollow">Introduction</a></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#naming" style=3D"text-decoration: non=
e;" class=3D"external-link" rel=3D"nofollow">Naming</a>
<ul>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#test-suite-names" style=3D"text-decor=
ation: none;" class=3D"external-link" rel=3D"nofollow">Test suite names</a>=
</li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#test-case-names" style=3D"text-decora=
tion: none;" class=3D"external-link" rel=3D"nofollow">Test case names</a></=
li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#keyword-names" style=3D"text-decorati=
on: none;" class=3D"external-link" rel=3D"nofollow">Keyword names</a></li>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#nami=
ng-setup-and-teardown" class=3D"external-link" rel=3D"nofollow">Naming setu=
p and teardown</a></li>
</ul></li>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#docu=
mentation" class=3D"external-link" rel=3D"nofollow">Documentation</a>
<ul>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#test-suite-documentation" style=3D"te=
xt-decoration: none;" class=3D"external-link" rel=3D"nofollow">Test suite d=
ocumentation</a></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#test-case-documentation" style=3D"tex=
t-decoration: none;" class=3D"external-link" rel=3D"nofollow">Test case doc=
umentation</a></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#user-keyword-documentation" style=3D"=
text-decoration: none;" class=3D"external-link" rel=3D"nofollow">User keywo=
rd documentation</a></li>
</ul></li>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#test=
-suite-structure" class=3D"external-link" rel=3D"nofollow">Test suite struc=
ture</a></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#test-case-structure" style=3D"text-de=
coration: none;" class=3D"external-link" rel=3D"nofollow">Test case structu=
re</a>
<ul>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#work=
flow-tests" class=3D"external-link" rel=3D"nofollow">Workflow tests</a></li=
>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#data=
-driven-tests" class=3D"external-link" rel=3D"nofollow">Data-driven tests</=
a></li>
</ul></li>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#user=
-keywords" class=3D"external-link" rel=3D"nofollow">User keywords</a></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#variables" style=3D"text-decoration: =
none;" class=3D"external-link" rel=3D"nofollow">Variables</a>
<ul>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#variable-naming" style=3D"text-decora=
tion: none;" class=3D"external-link" rel=3D"nofollow">Variable naming</a></=
li>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#pass=
ing-and-returning-values" class=3D"external-link" rel=3D"nofollow">Passing =
and returning values</a></li>
</ul></li>
<li><a href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/bl=
ob/master/HowToWriteGoodTestCases.rst#avoid-sleeping" style=3D"text-decorat=
ion: none;" class=3D"external-link" rel=3D"nofollow">Avoid sleeping</a></li=
>
</ul>
<p><br></p>
<h2 id=3D"HowtowritegoodTestCases-Introduction"><a style=3D"text-decoration=
: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/=
blob/master/HowToWriteGoodTestCases.rst#id11" class=3D"external-link" rel=
=3D"nofollow">Introduction</a></h2>
<ul>
<li>These are high-level guidelines for writing good test cases using Robot=
 Framework.
<ul>
<li>How to actually interact with the system under test is out of the scope=
 of this document.</li>
</ul></li>
<li>Most important guideline is keeping test cases as easy to understand as=
 possible for people familiar with the domain.
<ul>
<li>This typically also eases maintenance.</li>
</ul></li>
<li>For more information about this subject, you may want to take a look at=
 these great resources:
<ul>
<li><a href=3D"http://www.slideshare.net/pekkaklarck/robot-framework-dos-an=
d-donts" rel=3D"nofollow" style=3D"text-decoration: none;" class=3D"externa=
l-link">Robot Framework Dos and Don'ts</a><span>&nbsp;</span>slides that ar=
e based on this how-to.</li>
<li><a rel=3D"nofollow" href=3D"http://cwd.dhemery.com/2009/11/wmaat" style=
=3D"text-decoration: none;" class=3D"external-link">Writing Maintainable Au=
tomated Acceptance Tests</a><span>&nbsp;</span>article by Dale Emery.</li>
<li><a href=3D"http://blog.codecentric.de/en/2010/07/how-to-structure-a-sca=
lable-and-maintainable-acceptance-test-suite" style=3D"text-decoration: non=
e;" rel=3D"nofollow" class=3D"external-link">How to Structure a Scalable An=
d Maintainable Acceptance Test Suite</a><span>&nbsp;</span>blog post by And=
reas Ebbert-Karroum.</li>
</ul></li>
</ul>
<h2 id=3D"HowtowritegoodTestCases-Naming"><a style=3D"text-decoration: none=
;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/blob/m=
aster/HowToWriteGoodTestCases.rst#id12" class=3D"external-link" rel=3D"nofo=
llow">Naming</a></h2>
<h3 id=3D"HowtowritegoodTestCases-TestSuiteNames"><a style=3D"text-decorati=
on: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCase=
s/blob/master/HowToWriteGoodTestCases.rst#id13" class=3D"external-link" rel=
=3D"nofollow">Test Suite Names</a></h3>
<ul>
<li>Suite names should be as descriptive as possible.</li>
<li>Names are created automatically from file or directory names:
<ul>
<li>Extensions are stripped.</li>
<li>Underscores are converted to spaces.</li>
<li>If name is all lower case, words are capitalized.</li>
</ul></li>
<li>Names can be relatively long, but overly long names are not convenient =
for the file system.</li>
<li>The name of the top level suite can be overridden from the command line=
 using the<span>&nbsp;</span><code>--name</code><span>&nbsp;</span>option i=
f needed.</li>
</ul>
<p>Examples:</p>
<ul>
<li><code>LoginTest.robot</code><span>&nbsp;</span>-&gt;<span>&nbsp;</span>=
<code>LoginTest</code></li>
<li><code>IP_v4_And_v6</code><span>&nbsp;</span>-&gt;<span>&nbsp;</span><co=
de>IP v4 And v6</code></li>
</ul>
<h3 id=3D"HowtowritegoodTestCases-TestCaseNames"><a href=3D"https://github.=
com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCa=
ses.rst#id14" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">Test Case Names</a></h3>
<ul>
<li>Test names should be descriptive like the suite names.</li>
<li>If a suite contains many similar tests and is well named, test names ca=
n be shorter.</li>
<li>Name is exactly the same as you specified in the test case file without=
 any conversion.</li>
</ul>
<p>For example, if we have tests related to invalid login in a file<span>&n=
bsp;</span><code>InvalidLoginTest.robot</code>, these would be OK test case=
 names:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Empty Password
Empty Username
Empty Username And Password
Invalid Username
Invalid Password
Invalid Username And Password</pre>=20
</div>
</div>
<p>These names would be somewhat long:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Login With Empty Password Should Fail
Login With Empty Username Should Fail
Login With Empty Username And Password Should Fail
Login With Invalid Username Should Fail
Login With Invalid Password Should Fail
Login With Invalid Username And Invalid Password Should Fail</pre>=20
</div>
</div>
<h3 id=3D"HowtowritegoodTestCases-KeywordNames"><a style=3D"text-decoration=
: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCases/=
blob/master/HowToWriteGoodTestCases.rst#id15" class=3D"external-link" rel=
=3D"nofollow">Keyword Names</a></h3>
<ul>
<li>Keyword names should be descriptive and clear.</li>
<li>Should explain what the keyword does, not how it does its task(s).</li>
<li>Very different abstraction levels (e.g.<span>&nbsp;</span><code>Input T=
ext</code><span>&nbsp;</span>or<span>&nbsp;</span><code>Administrator Logs =
Into System</code>).</li>
<li>There is no clear guideline on whether a keyword should be fully title =
cased or have only the first letter be capitalized.
<ul>
<li>Title casing is often used when the keyword name is short (e.g.<span>&n=
bsp;</span><code>Input Text</code>).</li>
<li>Capitalizing just the first letter typically works better with keywords=
 that are like sentences (e.g.<span>&nbsp;</span><code>Administrator Logs I=
nto System</code>). These type of keywords are often higher level.</li>
</ul></li>
</ul>
<p><br></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Key=
words ***
Login With Valid Credentials</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bad:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Key=
words ***
Input Valid Username And Valid Password And Click Login Button</pre>=20
</div>
</div>
<p><br></p>
<h3 id=3D"HowtowritegoodTestCases-NamingSetupAndTeardown"><a href=3D"https:=
//github.com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteG=
oodTestCases.rst#id16" style=3D"text-decoration: none;" class=3D"external-l=
ink" rel=3D"nofollow">Naming Setup And Teardown</a></h3>
<ul>
<li>Try to use name that describes what is done.
<ul>
<li>Possibly use an existing keyword.</li>
</ul></li>
<li>More abstract names are acceptable if a setup or teardown contains unre=
lated steps.
<ul>
<li>Listing steps in name is duplication and a maintenance problem (e.g.<sp=
an>&nbsp;</span><code>Login To System, Add User, Activate Alarms And Check =
Balance</code>).</li>
<li>Often better to use something generic (e.g.<span>&nbsp;</span><code>Ini=
tialize System</code>).</li>
</ul></li>
<li>BuiltIn keyword<span>&nbsp;</span><a href=3D"http://robotframework.org/=
robotframework/latest/libraries/BuiltIn.html#Run%20Keywords" rel=3D"nofollo=
w" style=3D"text-decoration: none;" class=3D"external-link">Run Keywords</a=
><span>&nbsp;</span>can work well if keywords implementing lower level step=
s already exist.
<ul>
<li>Not reusable so best used when the setup or teardown scenario is needed=
 only once.</li>
</ul></li>
<li>Everyone working with these tests should always understand what a setup=
 or teardown does.</li>
</ul>
<p><br></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Suite Setup  Initialize System</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good (if only used once):</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Suite Setup  Run Keywords
...  Login To System  AND
...  Add User  AND
...  Activate Alarms  AND
...  Check Balance</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bad:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Suite Setup  Login To System, Add User, Activate Alarms And Check Balance</=
pre>=20
</div>
</div>
<p><br></p>
<h2 id=3D"HowtowritegoodTestCases-Documentation"><a href=3D"https://github.=
com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCa=
ses.rst#id17" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">Documentation</a></h2>
<h3 id=3D"HowtowritegoodTestCases-TestSuiteDocumentation"><a href=3D"https:=
//github.com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteG=
oodTestCases.rst#id18" style=3D"text-decoration: none;" class=3D"external-l=
ink" rel=3D"nofollow">Test Suite Documentation</a></h3>
<ul>
<li>Often a good idea to add overall documentation to test case files.</li>
<li>Should contain background information, why tests are created, notes abo=
ut execution environment, etc.</li>
<li>Do not just repeat test suite name.
<ul>
<li>Better to have no documentation if it is not really needed.</li>
</ul></li>
<li>Do not include too much details about test cases.
<ul>
<li>Tests should be clear enough to understand alone.</li>
<li>Duplicate information is waste and maintenance problem.</li>
</ul></li>
<li>Documentation can contain links to more information.</li>
<li>Consider using test suite metadata if you need to document information =
represented as name-value pairs (e.g.<span>&nbsp;</span><code>Version: 1.0<=
/code><span>&nbsp;</span>or<span>&nbsp;</span><code>OS: Linux</code>).</li>
<li>Documentation and metadata of the top level suite can be set from the c=
ommand line using<span>&nbsp;</span><code>--doc</code><span>&nbsp;</span>an=
d<span>&nbsp;</span><code>--metadata</code><span>&nbsp;</span>options, resp=
ectively.</li>
</ul>
<p><br></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Documentation  Tests to verify that account withdrawals succeed and
...            fail correctly depending from users account balance
...            and account type dependent rules.
...            See http://internal.example.com/docs/abs.pdf
Metadata  Version  0.1</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bad (especially if suite is named well like&nbsp;AccountWithdrawalTest.r=
obot):</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Documentation    Tests Account Withdrawal.</pre>=20
</div>
</div>
<h3 id=3D"HowtowritegoodTestCases-TestCaseDocumentation"><a href=3D"https:/=
/github.com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGo=
odTestCases.rst#id19" style=3D"text-decoration: none;" class=3D"external-li=
nk" rel=3D"nofollow">Test Case Documentation</a></h3>
<ul>
<li>Test normally does not need documentation.
<ul>
<li>Name and possible documentation of the parent suite and test's own name=
 should give enough background information.</li>
<li>Test case structure should be clear enough without documentation or oth=
er comments.</li>
</ul></li>
<li>Tags are generally more flexible and provide more functionality (statis=
tics, include/exclude, etc.) than documentation.</li>
<li>Sometimes test documentation is useful. No need to be afraid to use it.=
</li>
</ul>
<p><br></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Valid Login
  [Tags]  Iteration-3  Smoke
  Open Login Page
  Input Username ${VALID USERNAME}
  Input Password ${VALID PASSWORD}
  Submit Credentials
  Welcome Page Should Be Open</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Bad:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Valid Login
  [Documentation]  Opens a browser to login url, inputs valid username
  ...  and password and checks that the welcome page is open.
  ... This is a smoke test. Created in iteration 3.
  Open Browser ${URL} ${BROWSER}
  Input Text field1 ${UN11}
  Input Text field2 ${PW11}
  Click Button button_12
  Title Should Be Welcome Page</pre>=20
</div>
</div>
<h3 id=3D"HowtowritegoodTestCases-UserKeywordDocumentation"><a style=3D"tex=
t-decoration: none;" href=3D"https://github.com/robotframework/HowToWriteGo=
odTestCases/blob/master/HowToWriteGoodTestCases.rst#id20" class=3D"external=
-link" rel=3D"nofollow">User Keyword Documentation</a></h3>
<ul>
<li>Not needed if keyword is relatively simple.
<ul>
<li>Good keyword, argument names and clear structure should be enough.</li>
</ul></li>
<li>Important usage is documenting arguments and return values.</li>
<li>Shown in resource file documentation generated with<span>&nbsp;</span><=
a href=3D"http://robotframework.org/robotframework/#built-in-tools" style=
=3D"text-decoration: none;" rel=3D"nofollow" class=3D"external-link">Libdoc=
</a><span>&nbsp;</span>and editors such as<span>&nbsp;</span><a href=3D"htt=
ps://github.com/robotframework/RIDE" style=3D"text-decoration: none;" class=
=3D"external-link" rel=3D"nofollow">RIDE</a><span>&nbsp;</span>can show it =
in keyword completion and elsewhere.</li>
</ul>
<h2 id=3D"HowtowritegoodTestCases-Testsuitestructure"><a style=3D"text-deco=
ration: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTest=
Cases/blob/master/HowToWriteGoodTestCases.rst#id21" class=3D"external-link"=
 rel=3D"nofollow">Test suite structure</a></h2>
<ul>
<li>Tests in a suite should be related to each other.
<ul>
<li>Common setup and/or teardown is often a good indicator.</li>
</ul></li>
<li>Should not have too many tests (max 10) in one file unless they are<spa=
n>&nbsp;</span><a href=3D"https://github.com/robotframework/HowToWriteGoodT=
estCases/blob/master/HowToWriteGoodTestCases.rst#data-driven-tests" style=
=3D"text-decoration: none;" class=3D"external-link" rel=3D"nofollow">data-d=
riven tests</a>.</li>
<li>Tests should be independent. Initialization using setup/teardown.</li>
<li>Sometimes dependencies between tests cannot be avoided.
<ul>
<li>For example, it can take too much time to initialize all tests separate=
ly.</li>
<li>Never have long chains of dependent tests.</li>
<li>Consider verifying the status of the previous test using the built-in<s=
pan>&nbsp;</span><code>${PREV TEST STATUS}</code><span>&nbsp;</span>variabl=
e.</li>
</ul></li>
</ul>
<h2 id=3D"HowtowritegoodTestCases-Testcasestructure"><a style=3D"text-decor=
ation: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestC=
ases/blob/master/HowToWriteGoodTestCases.rst#id22" class=3D"external-link" =
rel=3D"nofollow">Test case structure</a></h2>
<ul>
<li>Test case should be easy to understand.</li>
<li>One test case should be testing one thing.
<ul>
<li><em>Things</em><span>&nbsp;</span>can be small (part of a single featur=
e) or large (end-to-end).</li>
</ul></li>
<li>Select suitable abstraction level.
<ul>
<li>Use abstraction level consistently (single level of abstraction princip=
le).</li>
<li>Do not include unnecessary details on the test case level.</li>
</ul></li>
<li>Two kinds of test cases:
<ul>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#work=
flow-tests" class=3D"external-link" rel=3D"nofollow">Workflow tests</a></li=
>
<li><a style=3D"text-decoration: none;" href=3D"https://github.com/robotfra=
mework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#data=
-driven-tests" class=3D"external-link" rel=3D"nofollow">Data-driven tests</=
a></li>
</ul></li>
</ul>
<h3 id=3D"HowtowritegoodTestCases-Workflowtests"><a href=3D"https://github.=
com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCa=
ses.rst#id23" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">Workflow tests</a></h3>
<ul>
<li>Generally have these phases:
<ul>
<li>Precondition (optional, often in setup)</li>
<li>Action (do something to the system)</li>
<li>Verification (validate results, mandatory)</li>
<li>Cleanup (optional, always in teardown to make sure it is executed)</li>
</ul></li>
<li>Keywords describe what a test does.
<ul>
<li>Use clear keyword names and suitable abstraction level.</li>
<li>Should contain enough information to run manually.</li>
<li>Should never need documentation or commenting to explain what the test =
does.</li>
</ul></li>
<li>Different tests can have different abstraction levels.
<ul>
<li>Tests for a detailed functionality are more precise.</li>
<li>End-to-end tests can be on very high level.</li>
<li>One test should use only one abstraction level</li>
</ul></li>
<li>Different styles:
<ul>
<li>More technical tests for lower level details and integration tests.</li=
>
<li>"Executable specifications" act as requirements.</li>
<li>Use domain language.</li>
<li>Everyone (including customer and/or product owner) should always unders=
tand.</li>
</ul></li>
<li>No complex logic on the test case level.
<ul>
<li>No for loops or if/else constructs.</li>
<li>Use variable assignments with care.</li>
<li>Test cases should not look like scripts!</li>
</ul></li>
<li>Max 10 steps, preferably less.</li>
</ul>
<p><br></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example using "normal" keyword-driven style:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Valid Login
  Open Browser To Login Page
  Input Username  demo
  Input Password  mode
  Submit Credentials
  Welcome Page Should Be Open</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example using higher level "gherkin" style:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Valid Login
  Given browser is opened to login page
  When user "demo" logs in with password "mode"
  Then welcome page should be open</pre>=20
</div>
</div>
<p>See the<span>&nbsp;</span><a href=3D"https://github.com/robotframework/W=
ebDemo/" style=3D"text-decoration: none;" class=3D"external-link" rel=3D"no=
follow">web demo project</a><span>&nbsp;</span>for executable versions of t=
he above examples.</p>
<p><br></p>
<h3 id=3D"HowtowritegoodTestCases-Data-driventests"><a style=3D"text-decora=
tion: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCa=
ses/blob/master/HowToWriteGoodTestCases.rst#id24" class=3D"external-link" r=
el=3D"nofollow">Data-driven tests</a></h3>
<ul>
<li>One high-level keyword per test.
<ul>
<li>Different arguments create different tests.</li>
<li>One test can run the same keyword multiple times to validate multiple r=
elated variations</li>
</ul></li>
<li>If the keyword is implemented as a user keyword, it typically contains =
a similar workflow as<span>&nbsp;</span><a href=3D"https://github.com/robot=
framework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.rst#w=
orkflow-tests" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">workflow tests</a>.
<ul>
<li>Unless needed elsewhere, it is a good idea to create it in the same fil=
e as tests using it.</li>
</ul></li>
<li>Recommended to use the<span>&nbsp;</span><em>test template</em><span>&n=
bsp;</span>functionality.
<ul>
<li>No need to repeat the keyword multiple times.</li>
<li>Easier to test multiple variations in one test.</li>
</ul></li>
<li>Possible, and recommended, to name column headings</li>
<li>If a really big number of tests is needed, consider generating them bas=
ed on an external model.</li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Test Template  Login With Invalid Credentials Should Fail

*** Test Cases ***  USERNAME           PASSWORD
Invalid Username    invalid            ${VALID PASSWORD}
Invalid Password    ${VALID USERNAME}  invalid
Invalid Both        invalid            invalid
Empty Username      ${EMPTY}           ${VALID PASSWORD}
Empty Password      ${VALID USERNAME}  ${EMPTY}
Empty Both          ${EMPTY}           ${EMPTY}

*** Keywords ***
Login With Invalid Credentials Should Fail
  [Arguments]  ${username}  ${password}
  Input Username  ${username}
  Input Password  ${password}
  Submit Credentials
  Error Page Should Be Open</pre>=20
</div>
</div>
<p>The<span>&nbsp;</span><a href=3D"https://github.com/robotframework/WebDe=
mo/" style=3D"text-decoration: none;" class=3D"external-link" rel=3D"nofoll=
ow">web demo project</a><span>&nbsp;</span>contains an executable version o=
f this example too.</p>
<h2 id=3D"HowtowritegoodTestCases-UserKeywords"><a href=3D"https://github.c=
om/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCas=
es.rst#id25" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">User Keywords</a></h2>
<ul>
<li>Should be easy to understand.
<ul>
<li>Same rules as with workflow tests.</li>
</ul></li>
<li>Different abstraction levels.</li>
<li>Can contain some programming logic (for loops, if/else).
<ul>
<li>Especially on lower level keywords.</li>
<li>Complex logic in libraries rather than in user keywords.</li>
</ul></li>
</ul>
<h2 id=3D"HowtowritegoodTestCases-Variables"><a href=3D"https://github.com/=
robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCases.=
rst#id26" style=3D"text-decoration: none;" class=3D"external-link" rel=3D"n=
ofollow">Variables</a></h2>
<ul>
<li>Encapsulate long and/or complicated values.</li>
<li>Pass information from them command line using the<span>&nbsp;</span><co=
de>--variable</code><span>&nbsp;</span>option.</li>
<li>Pass information between keywords.</li>
</ul>
<h3 id=3D"HowtowritegoodTestCases-VariableNaming"><a style=3D"text-decorati=
on: none;" href=3D"https://github.com/robotframework/HowToWriteGoodTestCase=
s/blob/master/HowToWriteGoodTestCases.rst#id27" class=3D"external-link" rel=
=3D"nofollow">Variable Naming</a></h3>
<ul>
<li>Clear but not too long names.</li>
<li>Can use comments in variable table to document them more.</li>
<li>Use case consistently:
<ul>
<li>Lower case with local variables only available inside a certain scope.<=
/li>
<li>Upper case with others (global, suite or test level).</li>
<li>Both space and underscore can be used as a word separator.</li>
</ul></li>
<li>Recommended to also list variables that are set dynamically in the vari=
able table.
<ul>
<li>Set typically using BuiltIn keyword<span>&nbsp;</span><a rel=3D"nofollo=
w" style=3D"text-decoration: none;" href=3D"http://robotframework.org/robot=
framework/latest/libraries/BuiltIn.html#Set%20Suite%20Variable" class=3D"ex=
ternal-link">Set Suite Variable</a>.</li>
<li>The initial value should explain where/how the real value is set.</li>
</ul></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Example:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Set=
tings ***
Suite Setup  Set Active User

*** Variables ***
# Default system address. Override when tested against other instances.
${SERVER URL}  http://sre-12.example.com/
${USER}  Actual value set dynamically at suite setup

*** Keywords ***
Set Active User
  ${USER}  Get Current User  ${SERVER URL}
  Set Suite Variable  ${USER}</pre>=20
</div>
</div>
<h3 id=3D"HowtowritegoodTestCases-PassingAndReturningValues"><a href=3D"htt=
ps://github.com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWri=
teGoodTestCases.rst#id28" style=3D"text-decoration: none;" class=3D"externa=
l-link" rel=3D"nofollow">Passing And Returning Values</a></h3>
<ul>
<li>Common approach is to return values from keywords, assign them to varia=
bles and then pass them as arguments to other keywords.
<ul>
<li>Clear and easy to follow approach.</li>
<li>Allows creating independent keywords and facilitates re-use.</li>
<li>Looks like programming and thus not so good on the test case level.</li=
>
</ul></li>
<li>Alternative approach is storing information in a library or using the B=
uiltIn<span>&nbsp;</span><a style=3D"text-decoration: none;" rel=3D"nofollo=
w" href=3D"http://robotframework.org/robotframework/latest/libraries/BuiltI=
n.html#Set%20Test%20Variable" class=3D"external-link">Set Test Variable</a>=
<span>&nbsp;</span>keyword.
<ul>
<li>Avoid programming style on the test case level.</li>
<li>Can be more complex to follow and make reusing keywords harder.</li>
</ul></li>
</ul>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Withdraw From Account
  Withdraw From Account  $50
  Withdraw Should Have Succeeded

*** Keywords ***
Withdraw From Account
  [Arguments]  ${amount}
  ${WITHDRAW_STATUS}  Withdraw From User Account  ${USER}  ${amount}
  Set Test Variable  ${WITHDRAW_STATUS}

Withdraw Should Have Succeeded
  Should Be Equal  ${WITHDRAW_STATUS}  SUCCESS</pre>=20
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Not so Good:</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: text; gutter: false; theme: Confluence" data-theme=3D"Confluence">*** Tes=
t Cases ***
Withdraw From Account
  ${status}  Withdraw From Account  $50
  Withdraw Should Have Succeeded  ${status}

*** Keywords ***
Withdraw From Account
  [Arguments]  ${amount}
  Run Keyword And Return  Withdraw From User Account  ${USER}  ${amount}

Withdraw Should Have Succeeded
  [Arguments]  ${status}
  Should Be Equal  ${status}  SUCCESS</pre>=20
</div>
</div>
<p><br></p>
<h2 id=3D"HowtowritegoodTestCases-Avoidsleeping"><a href=3D"https://github.=
com/robotframework/HowToWriteGoodTestCases/blob/master/HowToWriteGoodTestCa=
ses.rst#id29" style=3D"text-decoration: none;" class=3D"external-link" rel=
=3D"nofollow">Avoid sleeping</a></h2>
<ul>
<li>Sleeping is a very fragile way to synchronize tests.</li>
<li>Safety margins cause too long sleeps on average.</li>
<li>Instead of sleeps, use keyword that polls has a certain action occurred=
.
<ul>
<li>Keyword names often starts with<span>&nbsp;</span><code>Wait ...</code>=
.</li>
<li>Should have a maximum time to wait.</li>
<li>Possible to wrap other keywords inside the BuiltIn keyword<span>&nbsp;<=
/span><a style=3D"text-decoration: none;" href=3D"http://robotframework.org=
/robotframework/latest/libraries/BuiltIn.html#Wait%20Until%20Keyword%20Succ=
eeds" rel=3D"nofollow" class=3D"external-link">Wait Until Keyword Succeeds<=
/a>.</li>
</ul></li>
<li>Sometimes sleeping is the easiest solution.
<ul>
<li>Always use with care.</li>
<li>Always add a reason. i.e.&nbsp; Sleep&nbsp; &nbsp;4s&nbsp; &nbsp;reason=
=3DMust wait a little bit here.</li>
<li>Never use in user keywords that are used often by tests or other keywor=
ds.</li>
</ul></li>
<li>Can be useful in debugging to stop execution.
<ul>
<li><a href=3D"http://robotframework.org/robotframework/latest/libraries/Di=
alogs.html" style=3D"text-decoration: none;" rel=3D"nofollow" class=3D"exte=
rnal-link">Dialogs library</a><span>&nbsp;</span>often works better.</li>
</ul></li>
</ul>
    </div>
</body>
</html>
------=_Part_2747_831873689.1633987586091--
